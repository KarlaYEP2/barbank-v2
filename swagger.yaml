openapi: 3.0.2
info:
  title: barbank_v2
  version: 1.0.0
paths:
  /sessions:
    summary: Path used to manage the list of sessions.
    description: >-
      The REST endpoint/path used to list and create zero or more `Session` entities.  This path
      contains a `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `Session` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
            examples:
              POST /sessions request:
                value:
                  username: sugma
                  password: nuts212121
        required: true
      tags:
        - sessions
      responses:
        '200':
          description: Sucssesful login
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Required parameter missing:
                  value:
                    error: Required parameter missing
          description: Required parameter missing
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Invalid credetnials:
                  value:
                    error: Invalid credentials
          description: Invalid credentials
      operationId: createSession
      summary: Create a Session
      description: Creates a new instance of a `Session`.
    delete:
      tags:
        - sessions
      responses:
        '204':
          description: Session succesfully deleted
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Invalid authorization format:
                  value:
                    error: Invalid authorization format
          description: Bad request
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Missing authorization:
                  value:
                    error: Missing authorization
                Invalid Token:
                  value:
                    error: Invalid Token
          description: Problem with authorization
      security:
        -
          Bearer: []
      summary: delete `Session`.
      description: delete `Session`.
  /users:
    summary: Path used to manage the list of users.
    description: >-
      The REST endpoint/path used to list and create zero or more `user` entities.  This path contains a
      `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `user` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user'
        required: true
      tags:
        - users
      responses:
        '201':
          description: Successful response.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                error:
                  value:
                    error: >-
                      user validation failed: (?<parameterName>[^:]+): Path
                      `(?<parameterNameAgain>[^`]+)` is required.(, ([^:]+): Path
                      `([^`]+)` is required.){0,2}
          description: parameter missing
        '409':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Username already exists:
                  value:
                    error: Username already exists
          description: Username already exists
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              examples:
                Parameter(s) value too short/long:
                  value:
                    error: >-
                      Path `(?<parameterName>.+)` \(`(?<sampleValue>.+)`\) is
                      (longer|shorter) than the (maximum|minimum) allowed length
                      \((?<requiredLength>\d+)\)
          description: Parameter(s) value too short/long
      operationId: createuser
      summary: Create a user
      description: Creates a new instance of a `user`.
  /users/current:
    get:
      tags:
        - sessions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
              examples:
                POST /current/sessions response:
                  value:
                    accounts:
                      -
                        account_number: keklbh5aryzk
                        balance: 10000
                        currency: EUR
                        name: Main
                        userId: 61671f1725bce0b2a5c911df
                    name: tom
                    username: ligma
          description: Successful request
      security:
        -
          Bearer: []
      summary: Get user data
      description: Returns active `user` data
components:
  schemas:
    error:
      title: Root Type for error
      description: ''
      type: object
      properties:
        error:
          type: string
      example:
        error: some text
    Session:
      title: Root Type for Session
      description: ''
      type: object
      properties:
        token:
          type: string
      example:
        token: 6160374dc187f33f31020d19
    user:
      title: Root Type for user
      description: ''
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        name:
          type: string
      example:
        username: sugma
        password: nuts212121
        name: sugma
  securitySchemes:
    Bearer:
      scheme: bearer
      type: http
tags:
  -
    name: sessions
    description: ''
  -
    name: users
    description: ''
